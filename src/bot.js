const TikTokBrowser = require('./browser/TikTokBrowser');
const CommentPoster = require('./browser/CommentPoster');
const VideoAnalyzer = require('./ai/VideoAnalyzer');
const CommentGenerator = require('./ai/CommentGenerator');
const { 
    VideoModel, 
    CommentModel, 
    SessionModel, 
    SettingsModel,
    ActionLogModel 
} = require('./database/models');
const winston = require('winston');

class TikTokBot {
    constructor() {
        this.browser = null;
        this.poster = null;
        this.analyzer = null;
        this.generator = null;
        this.isRunning = false;
        this.sessionId = null;
        this.stats = {
            videosAnalyzed: 0,
            relevantVideos: 0,
            commentsPosted: 0,
            commentsFailed: 0
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        this.logger = winston.createLogger({
            level: 'info',
            format: winston.format.combine(
                winston.format.timestamp(),
                winston.format.printf(({ timestamp, level, message }) => {
                    return `${timestamp} [${level.toUpperCase()}]: ${message}`;
                })
            ),
            transports: [
                new winston.transports.Console(),
                new winston.transports.File({ filename: 'logs/bot.log' })
            ]
        });
    }

    async initialize() {
        try {
            this.logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            this.browser = new TikTokBrowser({
                headless: process.env.HEADLESS_MODE === 'true'
            });
            await this.browser.initialize();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const isLoggedIn = await this.browser.checkLoginStatus();
            if (!isLoggedIn) {
                this.logger.warn('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                await this.browser.manualLogin();
            }
            
            this.poster = new CommentPoster(this.browser.page);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI
            if (!process.env.OPENAI_API_KEY) {
                throw new Error('OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            this.analyzer = new VideoAnalyzer(process.env.OPENAI_API_KEY);
            this.generator = new CommentGenerator(process.env.OPENAI_API_KEY);
            
            await this.analyzer.initialize();
            
            this.logger.info('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
            throw error;
        }
    }

    async start(config = {}) {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const settings = {
                feedType: config.feedType || 'general',
                hashtags: config.hashtags || [],
                minRelevanceScore: parseFloat(await SettingsModel.get('min_relevance_score') || '0.7'),
                commentDelay: parseInt(await SettingsModel.get('comment_delay_seconds') || '10'),
                videoDelayMin: parseInt(await SettingsModel.get('video_process_delay_min') || '3'),
                videoDelayMax: parseInt(await SettingsModel.get('video_process_delay_max') || '8'),
                maxCommentsPerHour: parseInt(await SettingsModel.get('max_comments_per_hour') || '30')
            };
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            this.sessionId = await SessionModel.create({
                feed_type: settings.feedType,
                target_hashtags: settings.hashtags.join(', ')
            });
            
            await ActionLogModel.log(this.sessionId, 'session_start', settings);
            
            this.isRunning = true;
            this.logger.info(`üì± –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–°–µ—Å—Å–∏—è #${this.sessionId})`);
            this.logger.info(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${JSON.stringify(settings)}`);
            
            // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            let commentsThisHour = 0;
            let hourStartTime = Date.now();
            
            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            for await (const video of this.browser.scrollFeed(settings.feedType, settings.hashtags)) {
                if (!this.isRunning) {
                    this.logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É');
                    break;
                }
                
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –≤–∏–¥–µ–æ
                    const existingVideo = await VideoModel.getByTikTokId(video.tiktok_id);
                    if (existingVideo) {
                        this.logger.info(`‚è≠Ô∏è –í–∏–¥–µ–æ ${video.tiktok_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
                        continue;
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –ë–î
                    const videoId = await VideoModel.create(video);
                    this.stats.videosAnalyzed++;
                    
                    this.logger.info(`\nüìπ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –æ—Ç @${video.author}`);
                    this.logger.info(`   "${video.description?.substring(0, 50)}..."`);
                    
                    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    const analysis = await this.analyzer.analyzeRelevance(video);
                    await VideoModel.updateRelevance(videoId, analysis);
                    
                    await ActionLogModel.log(this.sessionId, 'video_analyzed', {
                        video_id: videoId,
                        author: video.author,
                        relevant: analysis.is_relevant,
                        score: analysis.relevance_score
                    });
                    
                    this.logger.info(`   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${(analysis.relevance_score * 100).toFixed(0)}%`);
                    
                    if (analysis.is_relevant && analysis.relevance_score >= settings.minRelevanceScore) {
                        this.stats.relevantVideos++;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        const currentTime = Date.now();
                        if (currentTime - hourStartTime > 3600000) {
                            commentsThisHour = 0;
                            hourStartTime = currentTime;
                        }
                        
                        if (commentsThisHour >= settings.maxCommentsPerHour) {
                            this.logger.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —á–∞—Å');
                            await this.randomDelay(3600000 - (currentTime - hourStartTime));
                            commentsThisHour = 0;
                            hourStartTime = Date.now();
                        }
                        
                        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        this.logger.info('üí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
                        const comment = await this.generator.generateComment(video, analysis);
                        
                        this.logger.info(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${comment.comment}"`);
                        this.logger.info(`   –°—Ç–∏–ª—å: ${comment.style}, –†–∏—Å–∫: ${comment.risk_level}`);
                        
                        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
                        if (comment.risk_level !== 'high') {
                            const success = await this.poster.postComment(video.url, comment.comment);
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            await CommentModel.create({
                                video_id: videoId,
                                comment_text: comment.comment,
                                generated_style: comment.style,
                                confidence_score: comment.confidence,
                                success: success,
                                error_message: success ? null : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
                            });
                            
                            await ActionLogModel.log(this.sessionId, 'comment_posted', {
                                video_id: videoId,
                                comment: comment.comment,
                                success: success
                            });
                            
                            if (success) {
                                this.stats.commentsPosted++;
                                commentsThisHour++;
                                this.logger.info('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω');
                                
                                // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                                await this.randomDelay(settings.commentDelay * 1000, settings.commentDelay * 1500);
                            } else {
                                this.stats.commentsFailed++;
                                this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
                                
                                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—á—É
                                if (await this.poster.checkForCaptcha()) {
                                    this.logger.warn('üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞, –ø–∞—É–∑–∞...');
                                    await this.randomDelay(300000, 600000); // 5-10 –º–∏–Ω—É—Ç
                                }
                            }
                        } else {
                            this.logger.warn('‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞');
                        }
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
                    await SessionModel.update(this.sessionId, {
                        videos_analyzed: this.stats.videosAnalyzed,
                        relevant_videos: this.stats.relevantVideos,
                        comments_posted: this.stats.commentsPosted,
                        comments_failed: this.stats.commentsFailed
                    });
                    
                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–∏–¥–µ–æ
                    await this.randomDelay(
                        settings.videoDelayMin * 1000,
                        settings.videoDelayMax * 1000
                    );
                    
                } catch (error) {
                    this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: ${error.message}`);
                    await ActionLogModel.log(this.sessionId, 'error', {
                        error: error.message,
                        video: video
                    });
                    
                    // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    await this.randomDelay(10000, 20000);
                }
            }
            
            await this.stop('completed');
            
        } catch (error) {
            this.logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            await this.stop('error', error.message);
            throw error;
        }
    }

    async stop(status = 'stopped', errorMessage = null) {
        this.isRunning = false;
        
        if (this.sessionId) {
            await SessionModel.end(this.sessionId, status, errorMessage);
            await ActionLogModel.log(this.sessionId, 'session_end', {
                status: status,
                stats: this.stats
            });
        }
        
        if (this.browser) {
            await this.browser.close();
        }
        
        this.logger.info(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:`);
        this.logger.info(`   –í–∏–¥–µ–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${this.stats.videosAnalyzed}`);
        this.logger.info(`   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ: ${this.stats.relevantVideos}`);
        this.logger.info(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${this.stats.commentsPosted}`);
        this.logger.info(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ—à–∏–±–∫–æ–π: ${this.stats.commentsFailed}`);
        this.logger.info(`\nüîö –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${status})`);
    }

    async randomDelay(min, max) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        this.logger.debug(`‚è±Ô∏è –ü–∞—É–∑–∞ ${(delay / 1000).toFixed(1)} —Å–µ–∫...`);
        await new Promise(resolve => setTimeout(resolve, delay));
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–≤–Ω–µ
    async pause() {
        this.isRunning = false;
        this.logger.info('‚è∏Ô∏è –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É');
    }

    async resume() {
        this.isRunning = true;
        this.logger.info('‚ñ∂Ô∏è –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    getStats() {
        return {
            sessionId: this.sessionId,
            isRunning: this.isRunning,
            ...this.stats
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = TikTokBot;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const bot = new TikTokBot();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
        console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
        await bot.stop('interrupted');
        process.exit(0);
    });
    
    // –ó–∞–ø—É—Å–∫
    (async () => {
        try {
            await bot.initialize();
            
            // –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            const config = {
                feedType: process.argv.includes('--hashtag') ? 'hashtag' : 'general',
                hashtags: []
            };
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
            const hashtagIndex = process.argv.indexOf('--hashtag');
            if (hashtagIndex !== -1 && process.argv[hashtagIndex + 1]) {
                config.hashtags = process.argv[hashtagIndex + 1].split(',').map(h => h.trim());
            }
            
            await bot.start(config);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        }
    })();
}