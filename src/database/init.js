const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

const dbPath = path.join(__dirname, '../../data/tiktok_bot.db');
const dbDir = path.dirname(dbPath);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(dbDir)) {
    fs.mkdirSync(dbDir, { recursive: true });
}

const db = new sqlite3.Database(dbPath);

const initDatabase = () => {
    db.serialize(() => {
        // –¢–∞–±–ª–∏—Ü–∞ –≤–∏–¥–µ–æ
        db.run(`
            CREATE TABLE IF NOT EXISTS videos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tiktok_id TEXT UNIQUE NOT NULL,
                author TEXT NOT NULL,
                description TEXT,
                hashtags TEXT,
                music_title TEXT,
                url TEXT NOT NULL,
                views_count INTEGER,
                likes_count INTEGER,
                comments_count INTEGER,
                shares_count INTEGER,
                is_relevant BOOLEAN DEFAULT 0,
                relevance_score REAL,
                relevance_reason TEXT,
                target_audience_match TEXT,
                processed_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        db.run(`
            CREATE TABLE IF NOT EXISTS comments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                video_id INTEGER REFERENCES videos(id),
                comment_text TEXT NOT NULL,
                generated_style TEXT,
                confidence_score REAL,
                posted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                success BOOLEAN DEFAULT 1,
                error_message TEXT
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π –±–æ—Ç–∞
        db.run(`
            CREATE TABLE IF NOT EXISTS bot_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                started_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                ended_at DATETIME,
                feed_type TEXT CHECK(feed_type IN ('general', 'hashtag')),
                target_hashtags TEXT,
                videos_analyzed INTEGER DEFAULT 0,
                relevant_videos INTEGER DEFAULT 0,
                comments_posted INTEGER DEFAULT 0,
                comments_failed INTEGER DEFAULT 0,
                status TEXT DEFAULT 'running',
                error_message TEXT
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        db.run(`
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        db.run(`
            CREATE TABLE IF NOT EXISTS action_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                session_id INTEGER REFERENCES bot_sessions(id),
                action_type TEXT NOT NULL,
                details TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        db.run('CREATE INDEX IF NOT EXISTS idx_videos_tiktok_id ON videos(tiktok_id)');
        db.run('CREATE INDEX IF NOT EXISTS idx_videos_relevant ON videos(is_relevant)');
        db.run('CREATE INDEX IF NOT EXISTS idx_comments_video_id ON comments(video_id)');
        db.run('CREATE INDEX IF NOT EXISTS idx_sessions_status ON bot_sessions(status)');
        db.run('CREATE INDEX IF NOT EXISTS idx_logs_session ON action_logs(session_id)');

        // –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const defaultSettings = [
            ['min_relevance_score', '0.7'],
            ['comment_delay_seconds', '10'],
            ['video_process_delay_min', '3'],
            ['video_process_delay_max', '8'],
            ['max_comments_per_hour', '30'],
            ['target_service_description', 'AI-—Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ HeadHunter']
        ];

        const stmt = db.prepare(`
            INSERT OR REPLACE INTO settings (key, value, updated_at) 
            VALUES (?, ?, CURRENT_TIMESTAMP)
        `);

        defaultSettings.forEach(([key, value]) => {
            stmt.run(key, value);
        });

        stmt.finalize();

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        db.all("SELECT name FROM sqlite_master WHERE type='table'", (err, tables) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', err);
            } else {
                console.log('\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
                tables.forEach(table => {
                    console.log(`   - ${table.name}`);
                });
            }
        });
    });
};

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
console.log(`üìÅ –ü—É—Ç—å –∫ –ë–î: ${dbPath}`);

initDatabase();

// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
db.close((err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î:', err);
    } else {
        console.log('\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
});