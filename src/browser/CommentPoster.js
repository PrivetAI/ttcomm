class CommentPoster {
    constructor(page) {
        this.page = page;
    }

    async postComment(videoUrl, commentText) {
        try {
            console.log(`üí¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ ${videoUrl}`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∏–¥–µ–æ
            await this.page.goto(videoUrl, { 
                waitUntil: 'networkidle2',
                timeout: 30000 
            });
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
            await this.page.waitForSelector('video', { timeout: 10000 });
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            await this.randomDelay(3000, 5000);
            
            // –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            const commentInputSelector = '[data-e2e="comment-input"]';
            await this.page.waitForSelector(commentInputSelector, { timeout: 10000 });
            
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            await this.page.click(commentInputSelector);
            await this.randomDelay(500, 1000);
            
            // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
            await this.typeHumanLike(commentText);
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            const postButtonSelector = '[data-e2e="comment-post"]';
            await this.page.waitForSelector(postButtonSelector, { 
                visible: true, 
                timeout: 5000 
            });
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            await this.randomDelay(1000, 2000);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await this.page.click(postButtonSelector);
            
            // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await this.waitForCommentPosted(commentText);
            
            console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω');
            
            // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await this.randomDelay(10000, 15000);
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
            
            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            await this.page.screenshot({ 
                path: `./logs/comment-error-${Date.now()}.png`,
                fullPage: true 
            });
            
            return false;
        }
    }

    async typeHumanLike(text) {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        const words = text.split(' ');
        
        for (let i = 0; i < words.length; i++) {
            const word = words[i];
            
            // –í–≤–æ–¥–∏–º —Å–ª–æ–≤–æ
            for (const char of word) {
                await this.page.keyboard.type(char, {
                    delay: this.randomInt(50, 150)
                });
                
                // –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –º–∏–∫—Ä–æ–ø–∞—É–∑—ã
                if (Math.random() < 0.1) {
                    await this.randomDelay(100, 300);
                }
            }
            
            // –ü—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ)
            if (i < words.length - 1) {
                await this.page.keyboard.press('Space');
                await this.randomDelay(50, 150);
            }
            
            // –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
            if (Math.random() < 0.2) {
                await this.randomDelay(200, 500);
            }
        }
    }

    async waitForCommentPosted(commentText) {
        try {
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å–ø–∏—Å–∫–µ
            await this.page.waitForFunction(
                (text) => {
                    const comments = document.querySelectorAll('[data-e2e="comment-text"]');
                    return Array.from(comments).some(comment => 
                        comment.textContent.includes(text)
                    );
                },
                { timeout: 10000 },
                commentText
            );
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
        }
    }

    async checkForCaptcha() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—á—É
        const captchaSelectors = [
            '[class*="captcha"]',
            '[id*="captcha"]',
            'iframe[src*="captcha"]',
            '[class*="verify"]'
        ];
        
        for (const selector of captchaSelectors) {
            const captcha = await this.page.$(selector);
            if (captcha) {
                console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞!');
                return true;
            }
        }
        
        return false;
    }

    async handleRateLimit() {
        console.log('‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω rate limit, –∂–¥–µ–º...');
        // –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        await this.randomDelay(60000, 120000); // 1-2 –º–∏–Ω—É—Ç—ã
    }

    randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    async randomDelay(min, max) {
        const delay = this.randomInt(min, max);
        await new Promise(resolve => setTimeout(resolve, delay));
    }
}

module.exports = CommentPoster;